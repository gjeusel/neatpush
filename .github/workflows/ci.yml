name: CI

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request: {}

jobs:
  lint:
    name: Lint (pre-commit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            .mypy_cache
          key: >
            lint
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('uv.lock') }}

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: uv run pre-commit
        run: uv run pre-commit run --all-files --show-diff-on-failure

  test:
    name: pytest - py${{ matrix.python-version }} - ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu] # [ubuntu, macos, windows]
        python-version: ["3.12"] # ["3.9", "3.10", "3.11", "3.12"]

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
      DEPS: yes

    runs-on: ${{ matrix.os }}-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Test
        run: uv run coverage run -m pytest -vv
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}

      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
          path: coverage
          include-hidden-files: true

  coverage-combine:
    name: coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: coverage-
          path: coverage

      - run: ls -la coverage
      - run: uvx coverage combine coverage
      - run: uvx coverage report
      - run: uvx coverage html --show-contexts --title "pydantic coverage for ${{ github.sha }}"

      - name: Store coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  docker:
    runs-on: ubuntu-latest
    name: Docker
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{secrets.SCW_DOCKER_REGISTRY}}/neatpush
            # gjeusel/neatpush
          # generate Docker tags based on the following events/attributes
          tags: |
            # type=schedule
            # type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=,suffix=,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: rg.fr-par.scw.cloud
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy Scaleway
    needs: [docker]
    # if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    container:
      image: scaleway/cli:2.7
      env:
        SCW_ACCESS_KEY: ${{secrets.SCW_ACCESS_KEY}}
        SCW_SECRET_KEY: ${{secrets.SCW_SECRET_KEY}}
        SCW_DEFAULT_ORGANIZATION_ID: ${{secrets.SCW_DEFAULT_ORGANIZATION_ID}}
        SCW_DEFAULT_PROJECT_ID: ${{secrets.SCW_DEFAULT_PROJECT_ID}}
        SCW_DEFAULT_ZONE: fr-par-1
        SCW_DEFAULT_REGION: fr-par
    steps:
      - name: Update Container
        run: >
          /scw --debug container container update ${{secrets.SCW_DOCKER_ID}}
          registry-image=${{secrets.SCW_DOCKER_REGISTRY}}/neatpush:${{ github.sha }}
